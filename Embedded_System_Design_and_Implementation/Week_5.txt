Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-03-27T13:36:00+11:00

====== Week 5 ======
C & C++ development in uVision
CMSIS Libraries - don't use for labs?
C project template in this week on canvas- use one in labs

===== Part 1 =====
cpu only code (no peripherals) can work on all devices in same family.
C simplifies design process
assembler can be used when timing is critical - can determine cycle time. Optimization can change timing

CMSIS - Cortex Microcontroller Software Interface Standard
can simplify common tasks
also provides hardware abstraction (API)

assembler startup file needed to setup heap, stack and interrupt vectors. Also calls main()

make sure that optimization is off, so that we can step through line-by-line

we will deploy to RAM from now on, so that flash does not degrade. Requires reprogramming every power cycle.

==== Clock Tree ====
25MHz external crystal oscillator as the main clock for the lab boards

many clock output:
* ethernet
* etc.

HSI - High speed Internal
HSE - High speed external

PLL - Phase lock loop
steps up crystal to 168 MHz (180 MHz max - overdrive) via multipliers and dividers

16 MHz internal crystal oscillator for startup

2nd external watch crystal oscillator - optional - can use for RTC
or RTC can use internal

reason for external:
internal clock frequency changes with temperature

oscillators also usually need 2 capacitors

another clock for ethernet

another for usb - not in design, uses internal

**SYSCLK** - main system clock. can be run by HSI, HSE or PLL

failing to setup clocks can form a boot-loop that cannot be broken using the JTag

==== C Code ====
use volatile for registers
make sure that memory is aligned



reference programming manual + TRM in lab report!
show how u got bit masks
demonstrate lab 2 next week (try to finish it this week)
WATCH LECTORIAL
CPU clock - 16MHz at start (use this value for lab 2)
25 MHz external clock, 180 MHz max, uses PLL (Phase lock loop)
===== Lecture: =====
emulate gpio inputs in uVision
set GPIOA_IDR to 0x600 for both switches not pressed
remember machine is little endian

=== GPIO process ===
enable clocks - RCC_EN
reset - RCC_AHB1RSTR - set reset bit to 1, must manually set back to 0
setup GPIO peripheral
OTYPER
	open-drain - one mosfet for current drain, floats if mosfet is not on
	psuh-pull - two mosfets
OSPEEDR
	rate of change - low speed for HID
PUPDR
	default state for IO - needs to be defined for input
	switches are active low
	pull up resistors on MC are not precise
	dont want pull down
	pull up - voltage divider (10k and 80k), adds redundancy
	LEDS active low
		set pull up for off by defautlt
AFR, ADFH
	set all alternate functions to 0 for configured ports

=== Asm code ===
comment the output register of a fuction
push used registers to stack
pop after function is done
don't worry about debouncing

