Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-03-10T12:24:32+11:00

====== Lab 1 ======
By Christopher Tait (S3899475)

Sections:
[ ] [[#Introduction|Introduction]]
[ ] [[#Design and Implementation|Design and Implementation]]
[ ] [[#Discussion|Discussion]]
[ ] [[#Conclusion|Conclusion]]

===== Introduction =====


===== Design and Implementation =====
==== Section 1 ====
=== Before Execution ===
{{.\pasted_image004.png}}
The values of R1-R3 before Section 1 is executed

{{.\pasted_image005.png}}
The memory pointed to by R1-R3

=== After Execution ===
{{.\pasted_image.png}}
The values of R1-R3 after Section 1 is executed

{{.\pasted_image001.png}}
The memory pointed to by R1

{{.\pasted_image002.png}}
The memory pointed to by R2

{{.\pasted_image003.png}}
The memory pointed to by R3

==== Section 2 ====
{{.\pasted_image006.png}}
The value of R0-R3

{{.\pasted_image007.png}}
The four bytes pointed to by R2

{{.\pasted_image008.png}}
The four bytes pointed to by R3

The STR instruction was used to store the value of R0 at the memory pointd to by R2 and the STRB instruction was used for R3. The behavior is as expected as only one byte was written for the STRB instruction

==== Section 3 ====
{{.\pasted_image009.png}}
The register file just after Section 3 was executed.

In this section, the LDR instruction was used to load data into R4 and the LDRB instruction was used to load R5. The difference between the two is that LDR by default loads a word (32 bits) and LDRB only loads a byte (8 bits)

==== Section 4 ====
| Assembly Instruction | Address    | Machine Code (Opcode) | Explanation                                             |
|:---------------------|:-----------|:----------------------|:--------------------------------------------------------|
| LDR R1, =tblConstant | 0x0800001C | 0x4916                | load from PC-relative label?                            |
| LDR R2, =tblSpace1   | 0x0800001E | 0x4A18                |                                                         |
| MOV R0, #0x08        | 0x08000020 | 0xF04F0008            | More the value 0x08 into R0                             |
| loop1 LDRB R3, [R1]  | 0x08000024 | 0x780B                | Load a byte of memory, pointed to by R1 in to R3        |
| STRB R3, [R2]        | 0x08000026 | 0x7013                | Store a byte into the memory loacation pointed to by R2 |
| ADD R1, R1, #0x01    | 0x08000028 | 0xF1010101            | Add 1 to R1, store the result in R1                     |
| ADD R2, R2, #0x01    | 0x0800002C | 0xF1020201            | Add 1 to R2, store the result in R2                     |
| SUBS R0, R0, #0x01   | 0x08000030 | 0x1E40                | Subtract and set status register                        |
| BNE loop1            | 0x08000032 | 0xD1F7                | Branch if negative flag set in status register          |

=== Before Execution ===
{{.\pasted_image010.png}}
Contents of tblSpace0

{{.\pasted_image011.png}}
Contents of tblSpace1

=== After Executon ===
{{.\pasted_image012.png}}
Contents of tblSpace0

{{.\pasted_image013.png}}
Contents of tblSpace1

Explanation of underlying operations

==== Section 5 ====


==== Section 6 ====


Code:
	''LDR R1, =tblConstant2''
	''LDR R2, =tblSpace0''
	''LDR R6, [R1], #0x04''
	''LDR R7, [R1], #0x04''
	''LDR R8, [R1], #0x04''
	''LDR R9, [R1]''
	''MUL R6, R6, R7''
	''MLA R6, R6, R8, R9''
	''STR R6, [R2]''

The MUL instruction multiplies the values from Rn and Rm, and places the least significant 32 bits of the result in Rd.

MLA{cond} Rd, Rn, Rm, Ra ; Multiply with accumulate
The MLA instruction multiplies the values from Rn and Rm, adds the value from Ra, and places the least significant 32 bits of the result in Rd

LDR without B, etc. means load a Word

== Code does this: ==
Load all values from tblConstant 2 intro registers R6-R9
Multiply R6 with R7, store the result in R7
Multiply R6 with R8, then add R9 - this will overflow
Store the result in tblSpace0

the result should be 0x285D E2D3 2140 8ABA
actual result = 0x2140 8ABA
as seen, the upper 32 bits are cut off

===== Discussion =====


===== Conclusion =====
