Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-05-01T13:39:45+10:00

====== Week 9 ======

===== Lectorial =====
emulate peripherals at high level - probs in recorded lecture
==== Simulating the Timer ====

==== Simulating the ADC ====
don't set break point in ADC read - JLink clears flags

Started with template code
ADC_A is connected to opamp
ADC_A routed to ADC123_IN0 (adc 1, 2 or 3)
needs GPIOA
all ADCs are on APB2

=== Code ===
enable GPIOA on AHB1 and ADC1 on APB2
reset interface - single reset for all ADCs (RCC_APB2RSTR_ADCRST)
configure GPIOA before ADC!
common interface around ADCs, temp sensor and bat sensor
ADC not alternate function in GPIO, it is an additional function

sourcing current - logic 1
sinking current - logic 0
output and input connected in output mode
input mode - ouput is disconnected
analogue mode - no pullup/pulldown. Still needs input protection. also adds Schmitt Trigger (de-noise)

MODER - 11 for analogue mode
needs nothing in AF register

84 MHz
set prescaler value accordingly
sets how quickly it samples. Need to sample at least twice as fast as signal
assumption - divide by 8 - 0b11
conversion takes a set number of cycles - not Hz
**prescaler code:**
ADC123_COMMON &= ~(ADC_CCR_ADCPRE__Msk);
ADC123_COMMON |= 0x03 « ADC_CCR_ADCPRE_Pos

// disable scan mode and set resolution to 12-bit
ADC1->CR1 &= ~(ADC_CR1_SCAN | 0x03 « ADC_CR1_RES_Pos);

// set alignment to right aligned, 12 bit res and single capture
ADC1->CR2 &= ~(ADC_CR2_CONT | ADC_CR2_ALIGN | ADC_CR2_SWTR

// CHANNELS - use regular channel with single conversion
// injected channel - basically an interrupt for channel, will read first then go back to others
// set to single channel - confusing. 3 registers, put in channels that u want to sample
ADC1->SQR3 &= ~(ADC_SQR3_SQ1_Msk);
// if u wanted to sample channel chanel 2
//ADC1->SQR3 |= 0x02
// ammount of channels to sample -> 0 == 1 channel, 1 == 2 channel
ADC1->SQR1 &= ~(ADC1_SQR1_L); // set to 0
// set sample rate - longer time = more accurate reading
ADC1_SMPR2 &= (ADC_SMPR2_SMP0_Msk);
ADC1_SMPR2 |= 0x00 « ADC_SMPR2_SMP0_Pos;
// turn on the converter
ADC1->CR2 |= ADC_CR2_ADON;
