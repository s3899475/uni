Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-07-10T17:28:16+10:00

====== Week 1 ======

===== Part 1 =====
Formal Languages
 - fomalizes what computers are, what algorithms are

comulters manipulate symbols
data is encoded as **symbols**
examples - encoding text
* ASCII
* unicode
| Encoding scheme       | Data             |
|:----------------------|:-----------------|
| ASCII, unicode        | text             |
| 1's complement        | numbers          |
| MP3                   | sound            |
| JPEG                  | photos           |
| MP4                   | video            |
| Programming languages | Programs         |
| zip                   | compressed ascii |

==== Formal Languages ====
defines a basic (or atomic) set of 'building blocks'
generate sequences of them

programming languages:
some strings are 'correct'
how do we tell the difference?

e.g. caesar cipher
burte force - can see clearly what is the correct shift, but how would a computer do this?

=== building blocks ===
* **lexical analysis** - convert a seq of characters into a seq of tokens
* **parsing** (What is the overall structure)- put together combination of tokens with respect to some syntax
	* sentence = noun + verb + adverb phrase
	* or verb + noun phrase + adverb phrase
=== Parts of formal languages ===
* an **alphabet** (Σ) - a finite set of symbols
* a **word** (or string) is a finite sequence of symbols from the alphabet (empty string is λ)
* a **language** is a **subset** of all (possible) strings
e.g.
Σ = {0..9, (, ), +, -, *, [[/,]] =} is an alphabet
Two words are (4+6)*(2-8) and 87)+1)*
The first is in the language of arithmetic, the second isn't

other alphabets:
* binary
* roman letters
* greek, cyrillic, arabic
* hexadecimal

== Examples of languages ==
| Alphabet                    | Language                                |
|:----------------------------|:----------------------------------------|
| {0, 1}                      | {0, 01, 011, 0111, ...}                 |
| {0, 1}                      | All (binary representations of) primes  |
| {0, 1}                      | {strings with an even number of zeroes} |
| {a..z}                      | {ab, cd, gh, ij, pq}                    |
| {0..9, (, ), +, -, *, /, =} | All legal arithmetic expressions        |
| ASCII characters            | All syntactically correct Java programs |
So we need:
* an alphabet
* means of specifying languages

===== Part 2 =====
==== Decision problems ====
Problem - description
Sort: Is a list on numbers sorted
Hamilonian circuit: Is there a circuilar path in this graph that visits every node
Primality: is a number a prime

they all have a **generic problem** and **specific instances**
instances e.g.: is 2 prime? Is 26 prime? is 29 prime? - all instances of Primality

decision problems can be encoded as formal languages
e.g.
**language**
let L = {all strings for which the answer is yes}. answer is yes if w ∈ L
**decision problem**
let w be a representation of a specific instance. answer is the solution to w

ways to represemt different languages (future stuff) - can be used in lots of different ways
* Regular expressions/Grammars
* Finite State Automata/Pushdown automata/Turing machines
* Nondeterminism

==== Regular Expressions ====
concise waay to specify a language
uses 'patterns' to specify a language
| Operation  | Expression | Meaning              | Example |
|:-----------|:-----------|:---------------------|:--------|
| Seq        | e1e2       | e1 followed by e2    | 10111   |
| Selection  | e1\|e2     | either e1 or e2      | 0\|1    |
| Repetition | e*         | e zero or more times | (001)*  |
|            |            |                      |         |

=== Examples ===
Language L1 = { strings over {0, 1} containing 00 or 11 }
In the language: 001, 1000, 00111, 1100, ...
Out of the language: 0, 1010, 01, 1, ...
Regular expression: (0|1)*(00|11)(0|1)* - others exist as well

Language L2 = { strings over {0, 1} **not** containing 00 or 11 }
In the language: 0, 1010, 01, 1, ...
Out of the language: 001, 1000, 00111, 1100, ...
Regular expression: λ|0|1|(01)*|(10)*|(01)*0|(10)*1 - others exist as well

λ is an empty string
every 0 must be followed by a 1, and every 0 must be followed by a 1
first two are the base case, next two are for even length, next two are for odd length

==== Grammars ====
A grammar is a set of rules for forming strings in a language
* Similar to rules used in natural languages (english, etc.)
* Special start symbol S
* Set of rules of the form X → Y (replace all X with Y)
* For any string w1Xw2, we can obtain string w1Yw2
* Only stop when no more rules apply
* similar to substiution in regex

=== Examples ===
== e.g. 1 ==
S → λ|ASA|BSB|A|B
A → 0
B → 1

S, A, B - variables (or non-terminals)
λ, 0, 1 - strings (or terminals)

S ⇒ A ⇒ 0	so 1 ∈ L(G) - 1 is in the language formed by the grammar
S ⇒ B ⇒ 1	so 0 ∈ L(G)
S ⇒ ASA ⇒ 0SA ⇒ 0S0 ⇒ 00	so 00 ∈ L(G)
S ⇒ ASA ⇒ ABSBA ⇒ 0BSBA ⇒ 0BBSBBA ⇒ ... ⇒ 011S110 ⇒ 011110	so 011110 ∈ L(G)
there are infinite more of these sequences, each step in the sequence can select any variable and sustitute it
I think this grammar is for all symetrical binary strings

== e.g. 2 ==
S → λ | aO | bO
O → λ aS | bS

S ⇒ λ 	so λ ∈ L(G)
S ⇒ aO ⇒ abS ⇒ abbO ⇒ abbaS ⇒ abba	so abba ∈ L(G)
S ⇒ bO ⇒ bbS ⇒ bbbO ⇒ bbbbS ⇒ bbbb	so bbbb ∈ L(G)
L(G) is the strings over {a,b} of even length
