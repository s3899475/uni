Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-08-12T14:23:55+10:00

====== Assignment 1 ======
Christopher Tait - S3899475

===== 1. Regular expressions and languages =====
==== a) ====
=== i) ===
 07 06 1900 e g
=== ii) ===
(19(0-9)(0-9) + (2-9)(0-9)(0-9)(0-9)) (e+g+p) (g+p+w) ((e+g+p+w) (1-3)^{+})* q
=== iii) ===
== D ==
((0(1-9))+((1-3)(1-9)))
== M ==
((0(1-9))+(1 (0-2)))
== Y ==
(0-9)(0-9)(0-9)(0-9)
== H ==
(e+g+p)(g+p+w)
== S ==
(e(1-3)*(g(1-3)*+p(1-3)*+w(1-3)*) + g(1-3)*(e(1-3)*+p(1-3)*+w(1-3)*) + p(1-3)*(g(1-3)*+e(1-3)*+w(1-3)*) + w(1-3)*(g(1-3)*+p(1-3)*+e(1-3)*))*
== E ==
(q+t)
== Sc1Sc2 ==
(0-9)^{+}—(0-9)^{+}
== Full Regex ==
((0(1-9))+((1-3)(1-9)))((0(1-9))+(1 (0-2)))(0-9)(0-9)(0-9)(0-9)(e+g+p)(g+p+w)(e(1-3)*(g(1-3)*+p(1-3)*+w(1-3)*) + g(1-3)*(e(1-3)*+p(1-3)*+w(1-3)*) + p(1-3)*(g(1-3)*+e(1-3)*+w(1-3)*) + w(1-3)*(g(1-3)*+p(1-3)*+e(1-3)*))*(q+t)(0-9)^{+}—(0-9)^{+}

==== b) ====
=== i) ===
It is not possible to check for palindromic scores as Regular Expressions only operate on a single character at a time, and have no memory of the characters that came before. Checking for palindromes would require something more like a pushdown automata, that can store the characters and check whether the 2nd half of the string is the same as the first but in reverse.
=== ii) ===

=== iii) ===
It is possible to find a sequence of matches in which no triplets were scored pretty easily, you could just change all of the (1-3)s in the syntactically correct regex above to (1-2)

=== iv) ===
Determining which house was the first to reach 100 victories would require that the number of victories for each house be stored somewhere when processing the string of matches. Regular Expressions have no ability to store this data, as they just act one character at a time.

===== 2. Grammars =====
S → SHN | λ
N → D | DN
D → 0 | 1 | 2 ...
H → e | g | p | w
==== a) ====
=== i) e11g3 ===
S → SHN → SHNHN → HNHN → eNHN → eNgN → eDNgN → eDDgN → eDDgD → e1DgD → e11gD → e11g3
=== ii) e1g2p3w1 ===
S → SHN → SHNHN → SHNHNHN → SHNHNHNHN → HNHNHNHN → ... → eNgNpNwN → ... → eDgDpDwD → ... → e1g2p3w1
=== iii) p1111 ===
S → SHN → HN → pN → pDN → pDDN → pDDDN → pDDDD → ... → p1111
==== b) ====
λ ∈ L(G) because the staring state, S, can immediately become an empty string (λ). The derivation would be:
S → λ
==== c) ====
L(G) = { {0-9}^{+}{a | e | p | w} }*
This is correct as the language consists of a string of numbers followed by a, e, p or w, any number of times. There must also be at least one digit because N must become at least one D, it cannot become an empty string.
==== d) ====
Sneaky's claim is not correct as there is no limit to the number of times a e, g, p or w appears in a row. This means that there could be multiple scores for the same house in a row. For example, e1e1e1d2d2 is in L(G). So the language also contains "syntactically incorrect" scores.
The language also contains scores that are not 1, 2 or 3 which cannot happen in a Buckscratch match.
==== e) ====
S → E | G | P | W
N → D | DN
D → 1 | 2 | 3
E → eNG | eNP | eNW | λ
G → gNE | gNP | gNW | λ
P → pNG | pNE | pNW | λ
W → wNG | wNP | wNE | λ

I derived my grammar by splitting H into a different symbol for each house, so that I could fulfil the requirement of the same house not being repeated. Then in each of these symbols I copied the first transition of S in the original language three times, replacing H with the specific house needed (e.g.  H became e for symbol E). These three transitions are the valid next houses that can come after a specific house's score.
At this point I realised that the original S state could be replaced with my new H state.
I also changed D to only include valid Buckscratch scores.
This language is correct as it solves the two problems with the original grammar, described in part d.


===== 3. Finite State Automata =====
==== a) ====
1. 00300700900100 (q10)
2. 37910003791 (q19)
3. 9993373791 (q5)
==== b) ====
M1 is non-deterministic as there are states with transitions of the same character. There are also empty string (λ) transitions.
Examples of states with more than one successor for a specific input:
* q0 (λ)
* q6 (3)
* q15 (3)
* q1 (3) 
* q9 (1) 
==== c) ====
The languages of the top and bottom parts of the machine are subsets of the language of the middle, as it allows for any numbers between the digits 3791.
L(M_{1}) = {w_{1}3w_{2}7w_{3}9w_{4}1w_{5} | w_{1},w_{2},w_{3},w_{4},w_{5} ∈ {0-9}*}
==== d) ====
It would be possible to just delete the entire upper and lower branches of the machine, and it would still have the same language. This is because the input only needs to reach one of the final states, and the languages of the top and bottom branches are subsets of the middle branch.
==== e) ====
M_{3} is not equivalent to M_{1} as strings such as 379100 which used to be accepted by q10 are now rejected. This is because none of the states now have transitions for any numbers after 3791 is inputted.

===== 4. Pushdown Automata =====
==== a) ====
=== i) adabaca ===
q0 → q0 → q1 → q2 → q2 → q2 → q2 → q2
=== ii) abcdcba ===
This input will be rejected
=== iii) acbdbcaa ===
q0 → q0 → q0 → q0 → q5 → q5 → q5 → q5 → q3
=== iv) bccadbb ===
q0 → q0 → q0 → q0 → q0 → q6 → q6 → q6 → q7 → q3

==== b) ====
L(q0 → q1 → q2) path = {adaw | w ∈ {a,b,c}*, number of a's in w = number of b's and c's, number of a's must never exceed number of b's and c's at any point in the string}
q0 → q4 → q3 path will never accept as the stack will never be empty from q5 (Z will never be exposed)
L(q0 → q5 → q3) = {wbdbw_{R}a | w ∈ {a,b,c}*}
L(q0 → q6 → q7 → q3) = {bw_{1}adw_{2} | w_{1} ∈ {a,b,c}* w_{2} ∈ {a,c}*, |w_{1}| = |w_{2}|, number of a's in w_{1} = number of a's in w_{2}}

So the final language of this machine is the union of all four branches
L(M_{4}) = {adaw | w ∈ {a,b,c}*, number of a's in w = number of b's and c's, number of a's must never exceed number of b's and c's at any point in the string} ∪ {wbdbw_{R}a | w ∈ {a-c}*} ∪ {wbdbw_{R}a | w ∈ {a,b,c}*} ∪ {bw_{1}adw_{2} | w_{1} ∈ {a,b,c}* w_{2} ∈ {a,c}*, |w_{1}| = |w_{2}|, number of a's in w_{1} = number of a's in w_{2}}
==== c) ====
This would change the language of that branch to:
L(q0 → q4 → q3) = {a^{n}ca^{m}dwa^{n+m} | w ∈ {b,c}, |w| = 1, n,m ≥ 0}
The language of the machine would change to also accept this language too, so the final language would be
L(M_{4}) = {adaw | w ∈ {a,b,c}*, number of a's in w = number of b's and c's, number of a's must never exceed number of b's and c's at any point in the string} ∪ {wbdbw_{R}a | w ∈ {a-c}*} ∪ {wbdbw_{R}a | w ∈ {a,b,c}*} ∪ {bw_{1}adw_{2} | w_{1} ∈ {a,b,c}* w_{2} ∈ {a,c}*, |w_{1}| = |w_{2}|, number of a's in w_{1} = number of a's in w_{2}} ∪ {a^{n}ca^{m}dwa^{n+m} | w ∈ {b,c}, |w| = 1, n,m ≥ 0}

==== d) ====
{{./pasted_image.png}}
This machine is correct as it will accept any string in the language {w | w = c*b*a*, |w| ≥ 1, w ! = c}. This will occur if you follow all of the lambda transitions after q1. The first state q0 is the only state that adds to the stack, the remaining states selectively pop the stack to ensure the order of the string is in the form a*b*c*b*a*. States q10, q7, q8 and q9 have been added to allow the 2nd half of the string (b*a*) to be any length that is greater than the first half.

===== 5. Turing Machines =====
==== a) ====
L(M_{6}) = {(bb)^{n}c^{+}w_{1}a^{n}w_{2} | w_{1} ∈ {b,c}* w_{2} ∈ {a,b,c}*, n ≥ 0, w_{2} must begin with a}
Any number of c's in a row will be accepted because the machine will go strait to the final state. This is shown in the first accepted string below.
For the other path that the input can take, things get a bit more complex. The input must begin with bb or bb repeated some number of times to get to state q3. Once there the machine allows for any number of b's c's and a's that have been turned into Ys. To transition out of q3, the input must have an a at the end of this section. The input must then be either finished, or have an a. The input must have the same number of bb's as a's as one a is turned into a Y for each loop. The machine will accept any characters after the a's, so long as the sequence starts with the character a, as the machine will never operate on this part of the input.
== accepted: ==
cccccc
cabcabc
bbccba
bbccbaacb
== rejected: ==
bbcabb
λ
bbcccc
==== b) ====
The machine M_{7}, obtained by deleting all transition from q1 to q1 is equivalent to M_{6} because a Turing machine does not need to consume all of its input to accept a string, it only needs to end up in a final state. Hence, when the machine gets to state q1 and has no transitions out of that state, it will always accept the input.
==== c) ====
The machine M_{8}, obtained by adding a transition from q3 to q3 with input a that writes an a and moves right is equivalent to M_{6}. This is because when this path is taken, when the machine gets to q6 on an input, it will go left until it hits the a character on the tape. There is no transition out of q6 with an a, so the Turing machine will halt. q6 is not a final state so the input will be rejected. Since this transition is non-deterministic (there is another transition out of q3 with the input as 'a') and this will happen whenever this path is taken, the path has no influence on the language of the machine.

===== 6. Creative Task =====
https://github.com/s3899475/COSC1107-Assignment-1
For my creative task, I chose to create an interactive simulation of Langton's Ant. The simulation was created in a language called Nim that can compile to Javascript, among other languages. This means that the simulation can run on any modern browser. It can be downloaded through the following link:
https://github.com/s3899475/COSC1107-Assignment-1/releases/download/1.0.0/s3899475-creative.zip
Langton's ant is effectively a two dimensional Turing machine that changes direction based on the colour of the space underneath it. The basic Langton's ant has two possible colours, one for turning right and one for turning left. When the simulation is first launched, this is what is used ('RL' is the ant definition, as seen on the simulator). I have added the ability to change the basic definition to one with more colours (states), just make sure to press the 'Restart' button after you change the definition. The definition can contain the characters R, L, U, and N for right turn, left turn, U-turn, and no turn.
The other settings available are the 'Jump', 'Interval', 'Colour Palette' and 'Show Ant' options. 'Jump' allows the simulation to run many steps of langton's ant before outputting a frame. This can be used to speed up the generation time. The 'Interval' setting controls the speed of the simulation, and the 'Colour Palette' and 'Show Ant' settings are self explanatory.
N.B. When running the simulation, be careful to set the 'Jump' slider to [[https://www.reddit.com/r/perfectlycutscreams/comments/r0hf7s/i_hope_no_one_has_posted_this_yet/|something your computer can handle]].

Some examples of the output of the simulation are shown below.
{{./pasted_image002.png}}
Output of the basic 'RL' ant definition

{{./pasted_image003.png}}
Langton's ant using the defintion 'LURURULU'. Kind of looks like a crab

{{./pasted_image004.png}}
Output of the ant 'LURURURURULU'. Forms a square pattern

{{./pasted_image005.png}}
Output of the ant 'LNRU'. Is very chaotic

===== 7. Platypus Game =====
==== a) ====
| Machine   | Ranking | Wins | For   | Against |
|:----------|:--------|:-----|:------|:--------|
| 167899475 | 1       | 262  | 15590 | 7851    |
| 169899475 | 1       | 262  | 15590 | 7851    |
| 176899475 | 2       | 261  | 13586 | 6294    |
| 146899475 | 3       | 256  | 15454 | 8262    |
| 148899475 | 3       | 256  | 15454 | 8262    |
| 190899475 | 3       | 256  | 15454 | 8262    |
| 195899475 | 4       | 252  | 15600 | 8117    |
| 178899475 | 5       | 251  | 3741  | 2750    |
| 161899475 | 6       | 247  | 7085  | 3103    |
| 162899475 | 7       | 246  | 9087  | 4895    |

When ranking on overall points, the ranking does not change much, half of the top winners are also top scorers. There were 45 machines without a win.
To alter the outcome of the tournament, the game could be altered so that reaching the tree gives 5 points. This would inscentivise moving towards it.

==== b) ====
The tournament that I ran took 36.023 seconds on a Linux desktop with an Intel i7-6700k and 16GB of RAM.

==== c) ====
Time For a Single Match = 36.023 / (268*(268+1)/2) = 1ms
| n         | Matches      | Estimated time |
|:----------|:-------------|:---------------|
| 100       | 5050         | 5s             |
| 1,000     | 500500       | 8m 20s         |
| 10,000    | 50005000     | 13h 52m 53s    |
| 100,000   | 5000050000   | 57d 20h        |
| 1,000,000 | 500000500000 | 5783d 8h       |

==== d) ====
3h = 1ms*(x*(x+1)/2)
x = 4648.5635
So I would be able to play 4648 matches in 3 hours

==== e) ====
To extend the Platypus game, I would suggest that the player be able to choose which animal the space they are on transitions to. Another way the game would be to add some more interaction between players. For instance, moving into another player could 'push' them in the direction of the move.

==== f) ====
|                  | Standard                                                                                                       | Tree                                                                                                           | Green                                                                                                       | Short                                                                                                          | Long                                                                                                           | Tiebreaker                                                                                                     |
|:-----------------|:---------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------|
| Time (s)         | 36.023                                                                                                         | 37.239                                                                                                         | 36.890                                                                                                      | 23.332                                                                                                         | 55.061                                                                                                         | 34.792                                                                                                         |
| Top 10           | 169899475\n167899475\n176899475\n190899475\n148899475\n146899475\n195899475\n178899475\n161899475\n162899475\n | 167899475\n169899475\n178899475\n161899475\n237899475\n146899475\n148899475\n190899475\n162899475\n203899475\n | 167899475\n169899475\n176899475\n48899475\n44899475\n45899475\n195899475\n147899475\n180899475\n178899475\n | 167899475\n169899475\n176899475\n146899475\n148899475\n190899475\n195899475\n178899475\n161899475\n162899475\n | 167899475\n169899475\n176899475\n146899475\n148899475\n190899475\n195899475\n178899475\n161899475\n162899475\n | 167899475\n169899475\n176899475\n146899475\n148899475\n190899475\n195899475\n178899475\n161899475\n162899475\n |
| Wins             | 31007                                                                                                          | 32005                                                                                                          | 31464                                                                                                       | 30972                                                                                                          | 31013                                                                                                          | 31007                                                                                                          |
| Draws            | 5039                                                                                                           | 4041                                                                                                           | 4582                                                                                                        | 5074                                                                                                           | 5033                                                                                                           | 5039                                                                                                           |
| Winless Machines | 45                                                                                                             | 2                                                                                                              | 23                                                                                                          | 46                                                                                                             | 45                                                                                                             | 45                                                                                                             |

==== g) ====
I would choose machine 167899475 as my representative, as it is my top performer overall and even in the altered versions of the game.
