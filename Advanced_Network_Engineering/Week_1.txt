Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-07-10T17:28:12+10:00

====== Week 1 - MPLS Fundamentals ======
===== Chapter 1 - Part 1 =====
==== MPLS overview ====
MultiProtocol Label Switching can transport payloads from many different protocols (IPv4, IPv6, Ethernet, ATM, Frame Relay, etc.)
Label Switching - MPLS domain switches, rather than routes, packets in the service provider code (in an ISP)
forwards packets using predetermined labels.

MPLS provides fine-grained traffic engineering capabilities, beyond IGP metrics

=== Limitations of IGP ===
* Operationally difficult
* Not flexible enough
	* IGP metrics offer very little control
		* only paths with minimum metric are used, others not used at all
	* IGP metrics lack optimisation capabilities
		* cannot forward different services between two endpoints through different paths

What MPLS does:
* Prepends each packet entering the domain with a small header with a fixed value
* Forwards the packet through the network using only the label value
* Can setup arbitrary label-switched paths which allows for solving complex traffic engineering problems

=== MPLS operations ===
* **Push** - add a MPLS header to a packet
	* Typically done by the ingress LSR (Label Switched Router)
* **Swap** - replaces the incoming label value with another
	* Done by transit LSR
* **Pop** - removes MPLS header from a packet
	* Done either by the penultimate (in Junos) or the egress LSR
VPNs may use double push
Transit router may perform swap-push

=== Label Switched Path (LSP) ===
A unidirectional path through the network defined in terms of label operations
Traffic entering the LSP is delivered to its endpoint
Labels are typically assigned by a label distribution protocol, but can also be configured statically

==== MPLS Router Types ====
=== Ingress label-switching router - 1 ===
also called head-end of a label switched path
Executes a push operation
Decides which packets will be forwarded down an LSP
	Often is not a pure label-switching router; decision of which traffic to forward down which LSP is not based on the other labels
=== Transit label-switching routers - 1 to multiple ===
Performs swap operations
Forwarding decisions based **only** on the label value - no knowledge of payload content
=== Penultimate router - 1 ===
The second to last router in the LSP
=== Egress label-switching router - 1 ===
The last router in a Label Switched Path (LSP)
Also called tail-end router
Traffic engineering - the egress router will take a forwarding decision based on IP routing

== Penultimate-hop popping ==
The MPLS header is remove by the penultimate (second-to-last) router in an LSP
Enabled by default on Junos OS
Avoids having to both remove the MPLS header and do an additional route lookup

==== Label Information Base (LIB) ====
Contains the actual label switching table.
Used by transit and penultimate routers
Maps incoming labels to label and forwarding actions
	e.g. Label-in(613) → Swap(122), send to next router

Stored in the **mpsl.0** table
Automatic values - 0, 1, 2 and 13 – Cannot use them
	Have a default forwarding action of **receive** (decapsulate)

Table can be populated by either static entries, or dynamic label distribution protocols
{{./pasted_image001.png}}
Top route was learnt by a dynamic protocol (LDP), other by static configuration
Sometimes there are two entries for the same label - one for S-bit=0 and one for S-bit=1
	The forwarding action for these two does not have to be the same

== MPLS Frame Mode vs Cell Mode ==
{{./pasted_image003.png}}
* **Only Frame Mode** is used in Junos OS
* in Frame mode, the MPLS header is also called a Shim header
* In Cell Mode, MPLS label information may be carried in ATM, VPI/VCI or Frame Relay DLCI fields

== Label Stack - Frame Mode ==
{{./pasted_image004.png}}
By default Junos supports up to 3 labels in the stack, can be set to 3-5 (''interfaces'' //''interface-name''// ''unit'' //''#''// ''family mpls'')

==== The MPLS Header ====
It is pretended to a packet, immediately after the Layer 2 header. It is removed at the end of the path
It is a 32-bit header that contains:
* 20 bits - Label
* 3 bits - Traffic class (TC) - used for class of service
* 1 bit - Bottom-of-stack bit (S) - set to 1 if this is the last label before the payload
* 8 bits - Time to live (TTL) - decremented at each hop
	* By default, the IP TTL is copied to the MPSL TTL

=== MPLS Labels ===
The MPLS label will typically change at each hop of an LSP
The label is not tied to the incoming interface
Packets with the same label are always treated the same
* There are a few exceptions to this rule. (e.g. carriers-of-carriers)
== Reserved labels ==
0-4 defined in RFC 3032
7 in RFC 6790
13 in RFC 5586
14 in RFC 3429
* **0 - IPv4 Explicit NULL**
	* label must be popped
	* forwarding must be based on what is below it in the header
		* either another label or the payload
* **1 - Router Alert Label**
	* Legal anywhere in the label stack except at the bottom
	* When a packet that contains this label arrives, it is delivered to a local software module for porcessing
	* The label beneath it in the stack determines the actual forwarding of the packet
	* If the packet is forwarded further, the router alert label should be pushed back onto the label stack before forwarding
	* Analogous to router alert option in IP packets
* **2 - IPv6 Explicit NULL**
	* Legal only when it is the sole label stack entry
	* Indicates that the label must be popped, and the forwarding of the packet based on the IPv6 header
* **3 - Implicit NULL**
	* never found in MPLS frames, only used in signalling
	* When an LSR would otherwise replace the label at the top of the stack with a new label, but the new label is 3 (Implicit null), the LSR pops the stack instead of swapping.
		* used for penultimate-hop-popping, where the penultimate router pops the last MPLS label
* **4 – 6 - Unassigned (Reserved)**
* **7 - Entropy Label Indicator**
* **8 – 12 Unassigned**
* **13 - Generic Associated Channel Label**
	* Informs a router that a received LSP belongs to a Virtual Circuit Connectivity Verification (VCCV) control channel
* **14 - OAM Alert Label**
	* Indicates that a packet is an MPLS Operation and Maintenance (OAM) packet as described in ITU-T Recommendation Y.1711.
* **15 - Unassigned**

== Difference between Implicit and Explicit Null ==
**Explicit null** (label 0)
* Is an actual label value that can be sent
* The egress router will just pop the MPLS header
**Implicit null** (label 3)
* An internal label, only used within signalling protocols
	* MPLS frames never sent with a label value of 3
* The egress router uses this value as a convention to request the penultimate router to pop the MPLS header

=== TC Field ===
Previously called Experimental (EXP) Field
Allows for 8 (3 bits) different classes of service (CoS)
Only the top label's TC will be used in processing

=== TTL Field ===
8 bits - functions similarly to the IP TTL field
Used as a protection mechanism against forwarding loops.
TTL = 0 will not be transmitted to the next-hop
In most cases the TTL of the top label is used in processing
Two approaches to MPLS TTL Handling:
== **Pipe Mode** ==
{{./pasted_image007.png}}
* Only the LSP egress and ingress points are visible from the outside
* MPLS TTL is set to 255 at ingress
== **Uniform Mode** - default in Junos ==
{{./pasted_image006.png}}
* All nodes in an LSP will be visible from the outside (know how many routers there are)
* IP TTL frozen while inside the LSP
* MPLS TTL copied to IP header when it is sent out from the egress router

=== When Must Penultimate-Hop Popping Be Disabled? ===
With penultimate-hop popping, the MPLS header is removed at the second-to-last
hop, and is not available to the egress router. In particular, two important fields will
be missing: the label value itself and the TC bits.
This disablement can create problems in two types of applications:
•Class of service applications that use the TC bits to mark packets as belonging to
different forwarding classes, for example for real-time and non-real-time traffic. If the
TC bits are lost, the egress router will not be able to recognize which packet
belongs to which forwarding class, and prioritize traffic correctly.
•Applications that need to preserve the “identity” of a LSP even at the last hop;
some examples are the distribution of multicast traffic in a VPN environment, and
circuit-cross-connect (CCC), an early technology to transport layer-2 frames over
MPLS.
